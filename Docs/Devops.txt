1) Dev versus Production Push Notifications
	a) Dev
		* Create a debug build of the iOS app
		* Use an empty server database: The User table stores the topic names per user and these are different for Dev versus Production. You probably don't want to have both types of topic names (for Dev and Production) in the same server/User table. It is also OK to use a User table that only had debug topic ARN's in it before.
		* Follow the procedure on https://crspybits.github.io/SyncServerII/ for setting up for push notifications using the Sync Server.
		* The .json file that you use to start the server must contain the "awssns.platformApplicationArn" key value for the dev AWS SNS platform application.

		See also https://stackoverflow.com/questions/12447025/
		* Note that this will use the development APNS certificate in AWS.
	
	b) Production (read above for Dev first)
		* Create an AppStore build of the iOS app.
		* Use an empty server database, or at least one where the User table only has only Production topic ARN's. See above also.
		* The .json file that you use to start the server must contain the "awssns.platformApplicationArn" key value for the production AWS SNS platform application.
		* Note that this will use the production APNS certificate in AWS.
		* Testing should comprise installing this iOS app build onto multiple devices, which use the production server, and following the test cases in the spreadsheet. E.g., an image upload should result in push notifications to all but the uploading user's devices.
		
2) Minimum iOS app version
	When a new version of the iOS app is released and we need users to update to that version, we can force this by use of the "iOSMinimumClientVersion" key/value pair in the server .json config file. This is reflected with the iOS app HTTP header "syncserver-minimum-ios-client-app-version". So, to require the users to update their app need to:
	a) First release the new iOS app version to the App Store.
	b) Second, update the server .json config file and restart the server.

3) Performing a database migration on AWS:
	3.1) Shut the server down for maintenance. Follow devops/MaintenanceShutdown/README.txt
	This will shut the server down but the database can still be accessed in the migration.
		
	3.2) Carry out the database migration.
		
	3.3) Start the server again. Follow devops/MaintenanceShutdown/README.txt
		This will optionally let you bring up a new server version. E.g., if the database migrations require a new server version.
		
4) An app change that requires all users to immediately use the new version of the app.
	This situation arose with version 1.5 of the app: I added a new media type to the app, URL media. In releasing it there is at least theoretically a race condition:
	a) I release the app to the app store.
	b) I have to wait a period of time for the app to be available on the app store before I can use the "iOSMinimumClientVersion" server key to force app updates.
	c) Someone gets a download of version 1.5 and adds a URL media instance.
	d) Someone with a prior version of the app tries to access that URL media instance and it fails.

One possible way around this is to add a "ServerMaintenance" mode for the server and that the app will respond to. The app would show "The app is undergoing maintenance. Please check back..." in response to this key from the server. So, the process would then be:
	a) First, change the server into maintenance mode.
	b) Release the app to the app store.
	c) Wait for the app to propagate and be available on the app store.
	d) Change the server out of maintenance mode and simultaneously increase the app version in "iOSMinimumClientVersion".
	
This way, no one can use the app for a period of time, but the race condition is avoided.

5) How to scale the server?
	a) Scaling the size/type of the EC2 instance.
		Are there parameters other than EC2 instance type? RAM size? Disk size?
	b) Criteria for scaling the number of EC2 instances?
	
6) How to scale the database?

