#!/usr/bin/swift

import Foundation

// Input generated by:
// select fileUUID, appMetaData, mimeType from FileIndex where fileGroupUUID in
// (select fileGroupUUID from FileIndex where mimeType = 'application/x-url') order by fileGroupUUID INTO OUTFILE '/Users/chris/output2.sql' FIELDS TERMINATED BY ',' ENCLOSED BY "'"  LINES TERMINATED BY '\n';

// Example input lines:
//'0D8A572F-923B-485F-B115-FFF5B8E9BF2E','{"fileType":"urlPreviewImage"}','image/jpeg'
//'1F54F6ED-FD5A-4096-BD45-76F22E540F91','{"fileType":"discussion"}','text/plain'
//'A03002DA-3CE0-48F1-80EF-42C9B913543E','{"fileType":"url"}','application/x-url'

struct AppMetaData: Codable {
    let fileType: String?
}

class ProcessMigrations {
    let decoder = JSONDecoder()
    
    let imageMimeType = "image/jpeg"
    let textMimeType = "text/plain"
    let urlMimeType = "application/x-url"
    
    let urlObjectType = "url"
    
    let changeResolverName = "CommentFile"
    
    let imageFileLabel = "image"
    let commentFileLabel = "comments"
    let urlFileLabel = "url"

    func writeUpdate(fileLabel: String, changeResolverName: String? = nil, fileUUID: UUID) {
        var changeResolver = ""
        if let changeResolverName = changeResolverName {
            changeResolver = ", changeResolverName = '\(changeResolverName)'"
        }
        
        let update = "UPDATE FileIndex SET objectType = '\(urlObjectType)', fileLabel = '\(fileLabel)'\(changeResolver) WHERE fileUUID = '\(fileUUID.uuidString)';"
        print("\(update)")
    }
    
    func doFileIndex() throws {
        var count = 0
        while let str = readLine() {
            count += 1
            let line = str.split(separator: "'")
                .filter {$0 != ","}
            guard line.count == 3 else {
                fatalError("Not exactly three items on a line: \(count): \(str)")
            }
            
            guard let fileUUID = UUID(uuidString: String(line[0])) else {
                fatalError("Could not get fileUUID: \(count): \(str)")
            }
            
            guard let dataForAppMetaData = String(line[1]).data(using: .utf8) else {
                fatalError("Could not convert to data: \(count): \(str)")
            }
            
            let appMetaData = try decoder.decode(AppMetaData.self, from: dataForAppMetaData)
                        
            if let fileType = appMetaData.fileType {
                switch fileType {
                case "urlPreviewImage":
                    writeUpdate(fileLabel: imageFileLabel, fileUUID: fileUUID)

                case "discussion":
                    writeUpdate(fileLabel: commentFileLabel, changeResolverName: changeResolverName, fileUUID: fileUUID)

                case "url":
                    writeUpdate(fileLabel: urlFileLabel, fileUUID: fileUUID)
                    
                default:
                    fatalError("Bad fileType: \(count): \(str)")
                }
            }
            else {
                fatalError("Bad data: \(count): \(str)")
            }
        
            // print("line: \(uuid), mimeType: \(mimeType)")
        }
    }
}

do {
    try ProcessMigrations().doFileIndex()
} catch let error {
    print("Error: \(error)")
}
